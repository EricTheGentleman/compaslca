########################################
# COMPAS-LCA Master Configuration File #
########################################

# =================================================================
# This is the master configuration file for the COMPAS-LCA pipeline
# If it is too overwhelming, you can just use the default settings
# You MUST specify the api_key for the LLM inferences
# Also the database choice determines the output significantly
# =================================================================


# === Database Settings ===
# Choose the LCA database that should be used for the material matching & LCA calculation
# Do not change this setting when executing the modules separately!
database_config:

  # Which database should be used for the material matching & LCA calculation?
  # KBOB is a smaller database with specifc materials for the Swiss environment
  # Oekobaudat is more comprehensive, but requires more token usage and is more expensive (by a factor of 2-3)
  database: "kbob" # ("kbob"/"oekobaudat")


# === Category Inference Settings ===
# These are the settings for the LLM-based LCA database category inference
category_inference_config:

  company: "OpenAI"

  model: "gpt-4o"

  api_key:   # Replace with your actual API key
  
  max_tokens: 2048

  temperature: 0


# === Material Inference Settings ===
# These are the settings for the LLM-based LCA database material entries inference
material_inference_config:

  company: "OpenAI"
  
  model: "gpt-4o"

  # insert the API key in single quotation marks (')
  api_key:   # Replace with your actual API key
  
  max_tokens: 2048

  temperature: 0


# === Category Prompt Variables ===
# Specifiy your prompt variables for the LLM-based category inference
# Due to the modular nature of the prompt, and with some programming knowledge, you can add variables to your liking
# Just add the text in the category prompt component template and load them with the new key in the category prompt builder file (in english AND german)
category_prompt_variables:

  # Language
  language: "en" #("en"/"de")

  # Should the LLM produce a summary through Chain of Thought Reasoning
  chain_of_thought: false

  # Specify if the LLM should first identify specific information, and then use that information to logically decduce an answer.
  extract_then_reason: false

  # Should the LLM output something first, and then evaluate it / improve upon its answer?
  iterative_self_refinement: false

  # Should context-aware examples be included.
  # The examples are not yet avaialble in the Oekobaudat (if set to true when choosing Oekobaudat, the examples in the prompt will be empty)
  include_examples: false


# === Material Prompt Variables ===
# Specifiy your prompt variables for the LLM-based material entries inference
# Due to the modular nature of the prompt, and with some programming knowledge, you can add variables to your liking
# Just add the text in the material prompt component template and load them with the new key in the material prompt builder file (in english AND german)
material_prompt_variables:

  # decide if the density (if available) of a material entry should be included in the LCI database passed to the LLM
  # Can increase token usage, especially for large material lists like in the Oekobaudat!
  include_density: false #(false/true)

  # Matching Strictness Phrasing. Specifies how many materials entries the LLM should try to match
  matching_strictness: "low" #("Low"/"Mid"/"High")

  # This boolean instructs the LLM to prioritize the materials that the LLM thinks are sustainable and that would fit the IfcBuildingElement / Target Layer
  prioritize_sustainability: false #(false/true)

  # Language
  language: "en" #("en"/"de")

  # Should the LLM produce a summary through Chain of Thought Reasoning
  chain_of_thought: false

  # Specify if the LLM should first identify specific information, and then use that information to logically decduce an answer.
  extract_then_reason: false

  # Should the LLM output something first, and then evaluate it / improve upon its answer?
  iterative_self_refinement: false

  # Should context-aware examples be included.
  # The examples are not yet avaialble in the Oekobaudat (if set to true when choosing Oekobaudat, the examples in the prompt will be empty)
  include_examples: false



# === Extraction Settings ===
# Depending on the availability of the IFC quantities, the BREP calculation can be disabeled
# It would also mean that any bounding-box, geometric complexity and ratios are not included for the LLM inference
# It is recommended to enable the brep calculation, but specify brep calculation timeout for high complexity elements
extraction_config:

  # If this is set to true, all subtypes of IfcBuildingElement will be included in the extraction
  # If set to false, you can adjust the selection of IFC entities in the file found in entity_config_path
  include_all_entities: true

  # If the IFC entities should be specified, refer to following YAML config file
  # Do not change the path!
  entity_config_path: config/step_01_data_extraction/extraction_config.yaml

  # Calculate BREP related quantities (area, volume) with compas_occ
  brep_enabled: true

  # Specify maximum time (seconds) for BREP processing
  brep_timeout: 30



# === IfcBuilding Element Data Filtering ===
# The filter submodule (step_01d_filter_data) is used to customize the data sheets that are passed to the LLM
# This is important to minimize token usage and to ensure that the LLM is not overloaded with data
# The settings below allow for filtering the JSON files / IFC data sheets. Recommended preset settings are included
filter_config:

  # Used to remove "empty" or "unknown" key-value pairs (minimizes tokens). Set to "false" to maintain.
  # It is recommended to set this to "true" for the LLM inference, as it reduces token usage, and empty key-value pairs are not relevant for the LLM
  remove_empty_values: true

  # Choose either "custom" or "preset". Custom allows for user-based configuration of what should be included.
  # Important: the pset_filter is independentent of the mode (i.e., custom/preset)
  mode: "preset"

  # Choose data Level of Information (LOI) preset. Used only if mode is "preset"; must be one of: low_LOI, medium_LOI, high_LOI
  preset: "medium_LOI"

  # Used only if mode is "custom"; this is the folder that contains both YAML files where you can fully customize the Element and Target Layer data sheets
  # Only use custom if you know exactly what you want or don't want to pass to the LLM.
  custom_path: "config/step_01_data_extraction/filter_custom"

  # If "use_pset_filter" is set to true, only psets included list "config/step_01_data_extraction/pset_selection.py" are passed to the LLM
  # This minimizes token usage alot, especially if there are a lot of unimportant psets (such as costs, quantities, etc.)
  # Please inspect the JSON datas in the folders data/pipeline/step_01c_dissect_layers and determine which presets have important material and functional data.
  # If there is no prior knowledge of exact pset key names (or relevancy for inference), set to false
  use_pset_filter: true

  # Path to the pset key file if use_pset_filter: true (can add and remove keys!)
  # In this file you can add and remove keys that are used for the PSET filtering of the JSON data sheets
  # The pset_key_file already has an exhaustive list of keys based on empirical knowledge of case study IFC files
  # Do not change the path!
  pset_key_file: "config/step_01_data_extraction/pset_selection.py"


  # Reordering of keys. Maintain the name and the indent, only change order!
  # LLMs can be sensitive to the order of data. Especially data in the "middle" tends to get lost, according to some literature.
  # The presets below are a good basis (i.e., you can also just leave as-is)
  # Key order for the "IfcBuildingElement" data sheets
  element_key_order:
    - Element Metadata
    - Element Material Data
    - Element Geometry Data
    - Element Property Sets
    - Element Relationships
    - Element Location
    - CompilationGroupID

  # Key order for the dissected layer sheets of multi-layer elements
  target_layer_key_order:
    - Target Layer of Material Inference
    - Building Element Context
    - CompilationGroupID

  # Key order for the dissected layer sheets of multi-layer elements
  building_element_context_key_order:
    - Element Metadata
    - Other Material Layers
    - Layer Set Metadata
    - Element Geometry Data
    - Element Property Sets
    - Element Relationships
    - Element Location



